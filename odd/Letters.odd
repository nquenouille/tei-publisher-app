<?xml-model href="teipublisher_odds.xsd"?>
<tei:TEI xmlns:pb="http://teipublisher.com/1.0" xmlns:tei="http://www.tei-c.org/ns/1.0" xml:lang="en">
    <teiHeader xmlns="http://www.tei-c.org/ns/1.0">
        <fileDesc>
            <titleStmt>
                <title>Bach Letters</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="bach_letters.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2023-07-10+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text xmlns="http://www.tei-c.org/ns/1.0">
        <body>
            <schemaSpec start="TEI teiCorpus" ident="Letters" source="teipublisher.odd"> 
                <elementSpec ident="hi" mode="change">
                    <model predicate="@rend=&#34;superscript&#34;" behaviour="inline">
            <outputRendition xml:space="preserve">
            
            
            
            vertical-align: super;
font-size: 50%;
            
            
            
            </outputRendition>
        </model>
                    <model predicate="@rend=&#34;underline&#34;" behaviour="inline">
            <outputRendition xml:space="preserve">
            text-decoration: underline;
            </outputRendition>
        </model>
                    <model predicate="@rend='semibold'" behaviour="inline">
            <outputRendition xml:space="preserve">
            font-weight: 600;
            </outputRendition>
        </model>
                    <model predicate="@rend=&#34;latintype&#34; or @rend=&#34;italic&#34;" behaviour="inline" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            font-style:italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
                    <model predicate="sic and corr" behaviour="alternate">
            <param name="default" value="corr[1]"/>
            <param name="alternate" value="sic[1]"/>
        </model>
                    <model predicate="expan and abbr[@type='resolve'] and $parameters?view='normalized'" behaviour="inline">
            <param name="content" value="expan"/>
        </model>
                    <model predicate="abbr and expan" behaviour="alternate">
            <param name="alternate" value="expan[1]"/>
            <param name="default" value="abbr[1]"/>
            <outputRendition xml:space="preserve">
            text-decoration:underline dotted;
            </outputRendition>
        </model>
                    <model predicate="orig and reg[@type='modern'] and $parameters?view='normalized'" behaviour="inline">
            <param name="content" value="reg"/>
        </model>
                    <model predicate="orig and reg" behaviour="alternate">
            <param name="default" value="reg[1]"/>
            <param name="alternate" value="orig[1]"/>
            <outputRendition xml:space="preserve">
            text-decoration:underline dotted;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="dateline" mode="change">
                    <model behaviour="block">
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="date" mode="change">
                    <model output="web" predicate="@when" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="@when"/>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            null
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <model output="web" predicate="@ref and $parameters?view='normalized'" behaviour="webcomponent">
            <param name="content" value="."/>
            <param name="name" value="'pb-highlight'"/>
            <param name="duration" value="3000"/>
            <param name="key" value="@ref"/>
            <param name="highlight-self" value="'highlight-self'"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="person" mode="add">
                    <model output="web" predicate="@xml:id" behaviour="listItem">
            <param name="name" value="'pb-highlight'"/>
            <param name="highlight-self" value="'highlight-self'"/>
            <param name="duration" value="3000"/>
            <param name="key" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[key]]" highlight-self="[[highlight-self]]" duration="[[duration]]">[[content]]</pb-highlight></pb:template>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="expan" mode="add"/>
                <elementSpec ident="place" mode="add">
                    <model behaviour="block">
            <param name="content" value="note/node()"/>
        </model>
                </elementSpec>
                <elementSpec ident="placeName" mode="add">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="rs" mode="add"/>
                <elementSpec ident="app" mode="add">
                    <model behaviour="inline">
            <param name="persistent" value="true()"/>
            <param name="content" value="lem"/>
            <param name="alternate" value="concat(rdg, ' (', ./rdg/@wit,')')"/>
            <param name="name" value="'pb-popover'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover persistent="[[persistent]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: turquoise;
            </outputRendition>
        </model>
                    <model behaviour="pass-through">
            <param name="lem" value="lem[1]/node()"/>
            <param name="rdg" value="string-join(  for $rdg at $p in ./rdg return (      '&#34;rdg[' || $p || ']&#34;:&#34;' || $rdg/string() || '&#34;',         '&#34;wit[' || $p || ']&#34;:&#34;' || $rdg/@wit/string() || '&#34;'     ),     ',' )"/>
            <pb:template xmlns="" xml:space="preserve"><span class="annotation annotation-app" data-type="app" data-annotation="{{[[rdg]]}}">[[lem]]</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="parent::person" behaviour="omit"/>
                    <model predicate="parent::num" behaviour="omit"/>
                    <model predicate="$parameters?view='notes' and not(parent::unclear)" behaviour="listItem">
            <param name="n" value="@n"/>
        </model>
                    <model predicate="not(parent::unclear)" behaviour="note">
            <param name="place" value="'footnote'"/>
            <outputRendition xml:space="preserve">
            
            
            
            font-size: 75%;
background-color: #C0C0C0;
padding: 0 .25em;
border-right: 1px solid black;
text-indent: 0;
margin: 0 .25em;
            
            
            
            </outputRendition>
        </model>
                    <model predicate="not(parent::unclear)" behaviour="inline"/>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="teiHeader" mode="change">
                    <model output="latex" behaviour="block">
            <param name="content" value=".//fileDesc//sourceDesc"/>
        </model>
                    <modelSequence output="fo">
            <model behaviour="heading">
                <param name="content" value="fileDesc/titleStmt/title"/>
                <param name="level" value="1"/>
            </model>
            <model behaviour="heading">
                <param name="content" value="'Metadata'"/>
                <param name="level" value="2"/>
            </model>
            <model behaviour="block">
                <param name="content" value=".//sourceDesc//msDesc"/>
            </model>
        </modelSequence>
                    <model predicate="$parameters?view='metadata'" behaviour="block" cssClass="metadata">
            <param name="content" value=".//fileDesc//sourceDesc | .//fileDesc//publicationStmt |.//profileDesc//correspDesc"/>
            <outputRendition xml:space="preserve">
            font-size: .75em;
            </outputRendition>
        </model>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="fo" behaviour="omit"/>
                    <model predicate="$parameters?header='letter'" behaviour="inline">
            <param name="content" value="./fileDesc/titleStmt/title"/>
            <param name="level" value="5"/>
        </model>
                </elementSpec>
                <elementSpec ident="ab" mode="change">
                    <model predicate="@rend='indent'" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '\A\a0\a0\a0\a0';
white-space: pre;
            </outputRendition>
        </model>
                    <model behaviour="paragraph"/>
                </elementSpec>
                <elementSpec ident="anchor" mode="change">
                    <model behaviour="note">
            <param name="label" value="@n/string()"/>
            <param name="content" value="let $n := @n return $get(.)/ancestor::TEI//div[@type='commentary']//note[@n=$n]/node()"/>
            <outputRendition xml:space="preserve">
            
            
            
            
            
            font-size: .85em;
background-color: #FDF5E6;
padding: 0 .25em;
border-right: 1px solid black;
text-indent: 0;
margin: 0 .25em;
            
            
            
            
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="term" mode="add">
                    <model behaviour="alternate">
            <param name="alternate" value="id(@ref, doc(&#34;/db/apps/tei-publisher/data/register.xml&#34;))"/>
            <param name="default" value="."/>
            <outputRendition xml:space="preserve">
            
            
            
            
            
            
            
            
            
            
            
            
                            font-style: bold;
                            color: #6495ED;
            
            
            
            
            
            
            
            
            
            
            
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="gap" mode="change">
                    <model behaviour="alternate">
            <param name="default" value="'[ ]'"/>
            <param name="alternate" value="concat('Fehlstelle. Grund: ', @reason)"/>
        </model>
                    <model predicate="desc" behaviour="inline">
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
                    <model predicate="@extent" behaviour="inline">
            <param name="content" value="@extent"/>
            <outputRendition xml:space="preserve" scope="before">
            content: ' [..';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '..] ';
            </outputRendition>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '[...]';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="p" mode="change">
                    <model predicate="descendant::add[@place='margin-right'] and not(descendant::add[@place='margin-left'])" behaviour="paragraph">
            <outputRendition xml:space="preserve">
            margin-right: 15%;
            </outputRendition>
        </model>
                    <model predicate="descendant::add[@place='margin-left'] and not(descendant::add[@place='margin-right'])" behaviour="paragraph">
            <outputRendition xml:space="preserve">
            margin-left: 15%;
            </outputRendition>
        </model>
                    <model predicate="descendant::add[@place='margin-left'] and descendant::add[@place='margin-right']" behaviour="paragraph">
            <outputRendition xml:space="preserve">
            
            
            
            
            
            
            
            
            
            margin-left: 15%;
margin-right: 15%;
            
            
            
            
            
            
            
            
            
            </outputRendition>
        </model>
                    <model output="print" predicate="ancestor::note" behaviour="inline"/>
                    <model behaviour="paragraph" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            text-align: justify;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <model predicate="$parameters?view='normalized' and not(ancestor::closer) and not(ancestor::opener) and not(ancestor::address) and not(ancestor::floatingText) and not(ancestor::head) and not(ancestor::signed)" behaviour="omit"/>
                    <model behaviour="break" useSourceRendition="true">
            <param name="type" value="'line'"/>
            <param name="label" value="@n"/>
            <outputRendition xml:space="preserve">
            null
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="l" mode="change"/>
                <elementSpec ident="supplied" mode="change">
                    <model predicate="parent::choice" behaviour="inline"/>
                    <model predicate="@reason='damage'" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:" &lt;";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"&gt; ";
            </outputRendition>
        </model>
                    <model predicate="@reason='illegible' or not(@reason)" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:" &lt;";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"&gt; ";
            </outputRendition>
        </model>
                    <model predicate="@reason='omitted'" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:" &lt;";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"&gt; ";
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:" &lt;";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"&gt; ";
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="add" mode="change">
                    <model predicate="@place='bottom' and $parameters?view='normalized'" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            
            
            
            white-space: pre;
content:'\A';
            
            
            
            </outputRendition>
        </model>
                    <model predicate="@place='margin-left'" behaviour="inline">
            <outputRendition xml:space="preserve">
            
            
            
            display: block;
float: left;
margin-left: -20%;
width: 5em;
margin-bottom: 0;
margin-top: 0;
clear: left;
overflow: visible;
font-size: 70%;
text-align: left;
text-indent: 0%;
            
            
            
            </outputRendition>
        </model>
                    <model predicate="@place='margin-right'" behaviour="inline">
            <outputRendition xml:space="preserve">
            
            
            
            display: block;
float: right;
margin-right: -15%;
width: 5em;
margin-bottom: 0;
margin-top: 0;
clear: right;
overflow: visible;
font-size: 70%;
text-align: right;
text-indent: 0%;
            
            
            
            </outputRendition>
        </model>
                    <model predicate="@type='correction' and $parameters?view='normalized'" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="if(preceding-sibling::del[1]) then (if(@hand) then concat('Ergänzt von: ', @hand, '; Urspr. Lesart: ', preceding-sibling::del[1]) else concat('Urspr. Lesart: ', preceding-sibling::del[1])) else (if(@hand) then concat('Ergänzt von: ', @hand, '; Urspr. Lesart: ', ancestor::*/preceding-sibling::del[1]) else concat('Urspr. Lesart: ', ancestor::*/preceding-sibling::del[1]))"/>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model predicate="not(@hand='Autor') and not($parameters?view='normalized')" behaviour="alternate">
            <param name="alternate" value="concat(&#34;Ergänzt von: &#34;, @hand)"/>
            <param name="default" value="."/>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
                    <model predicate="@hand" behaviour="alternate">
            <param name="alternate" value="concat(&#34;Ergänzt von: &#34;, @hand)"/>
            <param name="default" value="."/>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="salute" mode="change">
                    <model predicate="parent::closer" behaviour="inline"/>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="@target" behaviour="link">
            <param name="uri" value="@target"/>
            <param name="alternate" value="@target"/>
            <param name="name" value="'pb-popover'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover uri="[[uri]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
        </model>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="facsimile" mode="add"/>
                <elementSpec ident="div" mode="change">
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="$parameters?view='notes'" behaviour="list">
            <param name="content" value="for $anchor in .//anchor/@n return  root($parameters?root)//div[@type='commentary']//note[@n=$anchor]"/>
            <param name="type" value="'custom'"/>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="span" mode="add">
                    <model predicate="$parameters?view='normalized' and @type='hyphen'" behaviour="omit" pb:mode="change">
            <outputRendition xml:space="preserve" scope="after">
            content:''
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="pb" mode="change">
                    <model predicate="@type='empty'" behaviour="inline">
            <param name="content" value="concat('&lt;Leerseite ', @n,'&gt;')"/>
            <outputRendition xml:space="preserve">
            display: block; color: grey; text-align: right; font-size: 75%;
            </outputRendition>
        </model>
                    <model output="latex" behaviour="inline">
            <param name="content" value="'[' || @f || ':' || @n || ']'"/>
            <pb:template xmlns="" xml:space="preserve">\marginpar{[[content]]}</pb:template>
        </model>
                    <model output="print" behaviour="inline">
            <param name="content" value="'[' || @f || ':' || @n || ']'"/>
        </model>
                    <model predicate="not(@type='hidden')" behaviour="webcomponent" useSourceRendition="true">
            <param name="content" value="@n"/>
            <param name="facs" value="let $path := id(substring-after(@facs, '#'), root($parameters?root)) return  'http://localhost:8080/exist/apps/tei-publisher/playground/' ||     $path/surface/graphic[@mimeType=&#34;image/jpg&#34;]/@url"/>
            <param name="name" value="'pb-facs-link'"/>
            <param name="emit" value="'transcription'"/>
            <param name="order" value="@n"/>
            <outputRendition xml:space="preserve">
            display: block; color: grey; text-align: right; font-size: 75%;
            </outputRendition>
            <outputRendition xml:space="preserve" scope="before">
            content: ' |p.';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '| '
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="msDesc" mode="add">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="'Aufbewahrungsort:'"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="(//msIdentifier//repository)[1]/node()"/>
            </model>
            <model behaviour="heading">
                <param name="content" value="'Inventarnr.:'"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="//msIdentifier//idno[@type='id']/node()"/>
            </model>
            <model behaviour="heading">
                <param name="content" value="'Inhalt:'"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="//msContents//summary//desc/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="publicationStmt" mode="change">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="'Lizenz: '"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="//publisher/node()"/>
            </model>
            <model behaviour="link" cssClass="link">
                <param name="link" value="//availability//licence/@target"/>
                <param name="target" value="'_blank'"/>
                <param name="content" value="//availability//licence/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="correspDesc" mode="add"/>
                <elementSpec ident="correspAction" mode="add">
                    <modelSequence>
            <model predicate="@type='sent'" behaviour="heading">
                <param name="content" value="'Absender: '"/>
                <param name="level" value="3"/>
            </model>
            <model predicate="@type='sent'" behaviour="block">
                <param name="content" value="if((count(persName) &gt; 1) and (persName[position() != last()])) then (for $pers in persName/node() return concat($pers,',&amp;#xa;')) else persName/node()"/>
            </model>
            <model predicate="@type='received'" behaviour="heading">
                <param name="content" value="'Empfänger: '"/>
                <param name="level" value="3"/>
            </model>
            <model predicate="@type='received'" behaviour="block">
                <param name="content" value="if((count(persName) &gt; 1) and (persName[position() != last()])) then (for $pers in persName/node() return concat($pers,',&amp;#xa;')) else persName/node()"/>
            </model>
            <model predicate="@type='sent'" behaviour="heading">
                <param name="content" value="'Abfassungsort und -datum: '"/>
                <param name="level" value="3"/>
            </model>
            <model predicate="@type='sent'" behaviour="block">
                <param name="content" value="concat(placeName/node(), ', ', date/node())"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="signed" mode="change">
                    <model predicate="parent::closer" behaviour="inline">
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="del" mode="change">
                    <model predicate="$parameters?view='normalized' and (following-sibling::add[1] or following-sibling::*/add[1])" behaviour="omit">
            <param name="content" value="' '"/>
        </model>
                    <model predicate="$parameters?view='normalized' and not(following-sibling::add[1]) and not(following-sibling::*/add[1])" behaviour="alternate">
            <param name="default" value="'〈…〉'"/>
            <param name="alternate" value="."/>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            text-decoration: line-through;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="birth" mode="add">
                    <model predicate="@when" behaviour="inline">
            <param name="content" value="if(following-sibling::death[1])then concat('(*', substring(@when, 0, 5), ', ') else concat('(*', substring(@when, 0, 5), ')')"/>
            <outputRendition xml:space="preserve">
            font-size: 80%;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="occupation" mode="add">
                    <model predicate="parent::person" behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="death" mode="add">
                    <model predicate="@when" behaviour="inline">
            <param name="content" value="if(preceding-sibling::birth[1])then concat('✝', substring(@when, 0, 5), ')') else concat('(✝', substring(@when, 0, 5), ')')"/>
            <outputRendition xml:space="preserve">
            font-size: 80%;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="closer" mode="change">
                    <model predicate="descendant::add[@place='margin-right'] and not(descendant::add[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-right: 15%;
            </outputRendition>
        </model>
                    <model predicate="descendant::add[@place='margin-left'] and not(descendant::add[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-left: 15%;
            </outputRendition>
        </model>
                    <model predicate="descendant::add[@place='margin-left'] and descendant::add[@place='margin-right']" behaviour="block">
            <outputRendition xml:space="preserve">
            
            
            
            
            
            
            
            
            
            margin-left: 15%;
margin-right: 15%;
            
            
            
            
            
            
            
            
            
            </outputRendition>
        </model>
                    <model predicate="preceding::add[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-left: 15%;
            </outputRendition>
        </model>
                    <model predicate="preceding::add[@place='margin-right']" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-right: 15%;
            </outputRendition>
        </model>
                    <model predicate="preceding::add[@place='margin-right'] and preceding::add[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
            
            
            
            
            
            
            
            
            
            margin-right: 15%;
margin-left: 15%;
            
            
            
            
            
            
            
            
            
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="floatingText" mode="change">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            
            
            
            margin-left: 10em;
margin-right: 10em;
            
            
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="facsimile" mode="add"/>
                <elementSpec ident="surface" mode="add">
                    <model output="print" behaviour="omit"/>
                </elementSpec>
            <elementSpec ident="opener" mode="change">
                    <model predicate="following::add[@place='margin-right'] and not(following::add[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-right: 15%;
            </outputRendition>
        </model>
                    <model predicate="following::add[@place='margin-left'] and not(following::add[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-left: 15%;
            </outputRendition>
        </model>
                    <model predicate="following::add[@place='margin-left'] and following::add[@place='margin-right']" behaviour="block">
            <outputRendition xml:space="preserve">
            
            
            
            margin-left: 15%;
margin-right: 15%;
            
            
            
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="address" mode="add">
                    <model predicate="not(ancestor::closer) and descendant::add[@place='margin-left'] and not(descendant::add[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-right: 15%;
            </outputRendition>
        </model>
                    <model predicate="not(ancestor::closer) and descendant::add[@place='margin-right'] and not(descendant::add[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-right: 15%;
            </outputRendition>
        </model>
                    <model predicate="not(ancestor::closer) and descendant::add[@place='margin-right'] and descendant::add[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
            
            
            
            margin-left: 15%;
margin-right: 15%;
            
            
            
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="unclear" mode="change">
                    <model predicate="not(@reason='illegible')" behaviour="alternate">
            <param name="default" value="if (child::note) then replace(., child::note/text(), '') else ."/>
            <param name="alternate" value="if (child::note) then note/text() else 'Lesart unsicher.'"/>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model predicate="@reason='illegible'" behaviour="alternate">
            <param name="default" value="'〈…〉'"/>
            <param name="alternate" value="if (child::note) then note/text() else 'Unleserlich.'"/>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="after">
            content: ' 〈…〉 ';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="emph" mode="change">
                    <model behaviour="inline" cssClass="annotation annotation-emphasize">
            <outputRendition xml:space="preserve">
            letter-spacing: 3px;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="seg" mode="change">
                    <model behaviour="inline" useSourceRendition="true"/>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
        </model>
                    <model predicate="following::add[@place='margin-right'] and following::add[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
            
            
            
            
            
            
            
            
            
            margin-right: 15%;
margin-left: 15%;
            
            
            
            
            
            
            
            
            
            </outputRendition>
        </model>
                    <model predicate="following::add[@place='margin-right'] and not(following::add[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-right: 15%;
            </outputRendition>
        </model>
                    <model predicate="following::add[@place='margin-left'] and not(following::add[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-left: 15%;
            </outputRendition>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
            <elementSpec ident="num" mode="add">
                    <model predicate="child::note" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="note/text()"/>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted; display: flex;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="metamark" mode="add">
                    <model behaviour="alternate">
            <param name="default" value="'......'"/>
            <param name="alternate" value="'Orig. Fehlstelle'"/>
            <outputRendition xml:space="preserve">
            color: transparent;
            </outputRendition>
            <outputRendition xml:space="preserve">
            
            text-decoration:underline dotted;
text-decoration-color: black;
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="gloss" mode="add">
                    <model predicate="@type='margin-right'" behaviour="inline">
            <outputRendition xml:space="preserve">
            
            
            
            display: block;
float: right;
margin-right: -15%;
width: 5em;
margin-bottom: 0;
margin-top: 0;
clear: right;
overflow: visible;
font-size: 70%;
text-align: right;
text-indent: 0%;
            
            
            
            </outputRendition>
        </model>
                    <model predicate="@type='margin-left'" behaviour="inline">
            <outputRendition xml:space="preserve">
            
            
            
            display: block;
float: left;
margin-left: -20%;
width: 5em;
margin-bottom: 0;
margin-top: 0;
clear: left;
overflow: visible;
font-size: 70%;
text-align: left;
text-indent: 0%;
            
            
            
            </outputRendition>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</tei:TEI>